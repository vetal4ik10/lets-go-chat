// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/vetal4ik10/lets-go-chat/internal/models"
	onetimetoken "github.com/vetal4ik10/lets-go-chat/pkdg/onetimetoken"
)

// TokenManager is an autogenerated mock type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

// InitToken provides a mock function with given fields: s
func (_m *TokenManager) InitToken(s string) (onetimetoken.Token, error) {
	ret := _m.Called(s)

	var r0 onetimetoken.Token
	if rf, ok := ret.Get(0).(func(string) onetimetoken.Token); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(onetimetoken.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewToken provides a mock function with given fields: u
func (_m *TokenManager) NewToken(u *models.User) (onetimetoken.Token, error) {
	ret := _m.Called(u)

	var r0 onetimetoken.Token
	if rf, ok := ret.Get(0).(func(*models.User) onetimetoken.Token); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(onetimetoken.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: t
func (_m *TokenManager) Remove(t onetimetoken.Token) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(onetimetoken.Token) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verified provides a mock function with given fields: t
func (_m *TokenManager) Verified(t onetimetoken.Token) bool {
	ret := _m.Called(t)

	var r0 bool
	if rf, ok := ret.Get(0).(func(onetimetoken.Token) bool); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
